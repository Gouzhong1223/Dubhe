server:
  port: 9527
  # rest API 版本号
  rest-version: v1

#配置数据源
spring:
  redis:
    #数据库索引
    database: 0
    host: 127.0.0.1
    port: 6379
    password:
    #连接超时时间
    timeout: 5000
  datasource:
    druid:
      db-type: com.alibaba.druid.pool.DruidDataSource
      driverClassName: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
      url: jdbc:log4jdbc:mysql://127.0.0.1:3306/dubhe-dev?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&allowMultiQueries=true&useInformationSchema=true
      username: test
      password: test

      # 初始化配置
      initial-size: 3
      # 最小连接数
      min-idle: 3
      # 最大连接数
      max-active: 15
      # 获取连接超时时间
      max-wait: 5000
      # 连接有效性检测时间
      time-between-eviction-runs-millis: 90000
      # 最大空闲时间
      min-evictable-idle-time-millis: 1800000
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false

      validation-query: select 1
      # 配置监控统计拦截的filters
      filters: stat
      stat-view-servlet:
        url-pattern: /druid/*
        reset-enable: false

      web-stat-filter:
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
  # 配置允许后面的Bean覆盖前面名称重复的Bean
  main:
    allow-bean-definition-overriding: true

  # 配置Sharding-JDBC数据源名称，可配置多个
  shardingsphere:
    datasource:
      name: master
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
        url: jdbc:log4jdbc:mysql://127.0.0.1:3306/dubhe-dev?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&allowMultiQueries=true&useInformationSchema=true
        username: test
        password: test

    #指定data_dataset表 主键id 生成策略
    sharding:
      tables:
        data_file:
          actual-data-nodes: master.data_file_$->{1..100000}
          table-strategy:
            standard:
              sharding-column: dataset_id
              precise-algorithm-class-name: org.dubhe.utils.MyPreciseShardingAlgorithm

        data_dataset_version_file:
          actual-data-nodes: master.data_dataset_version_file_$->{1..100000}
          table-strategy:
            standard:
              sharding-column: dataset_id
              precise-algorithm-class-name: org.dubhe.utils.MyPreciseShardingAlgorithm
      props:
        sql:
          show: true

k8s:
  # k8s集群配置文件,将k8s集群master下$HOME/.kube/config文件 复制到dubhe-task/src/main/resources/下 重命名为 kubeconfig
  kubeconfig: kubeconfig
  # nfs服务暴露的IP地址 如需测试需修改为合适的地址
  nfs: 127.0.0.1
  #nfs服务端 共享目录
  nfs-root-path: /nfs/
  nfs-root-windows-path: "Z:"
  # 命名空间关键字
  namespace: namespace
  # k8s ingress域名 如需测试需修改为合适的域名
  host: notebook.test.com
  # k8s ingress-controller 对外port，获取方式：部署 ingress-controller 后，在k8s master节点执行 kubectl get svc -A | grep 'ingress-nginx-controller' 获取80对应的外部端口
  port: 33334
  # elasticsearch暴露的服务地址，获取方式 部署 管理集群日志 后，在k8s msater节点执行 kubectl get svc -A | grep 'elasticsearch' 获取9200对应的外部端口
  elasticsearch:
    hostlist: ${eshostlist:127.0.0.1:33333}
    # 日志采集配置信息
    log:
      type: _doc
      # 过滤源字段
      source_field: log,@timestamp,kubernetes.pod_name
  # 异步回调
  callback:
    # boot 单机部署即回调本机实例
    url: localhost:${server.port}
    token:
      # 秘钥
      secret-key: 1qaz2wsx
      # 过期时间（秒）
      expire-seconds: 300
  # 展示Pod的CPU使用率,Memory使用量,GPU使用率的grafana地址
  pod:
    metrics:
      grafanaUrl: http://127.0.0.1:30006/d/job/monitor?orgId=1&refresh=5s&kiosk&var-pod=
  nfs-storage-class-name: zjlab-nfs-storage
#配置harbor
harbor:
  # habor服务域名，需要将用户持有域名解析到 harbor服务所在服务器ip
  address: harbor.test.com
  username: admin
  password: Harbor12345
  model-name: train
# data模块配置
data:
  annotation:
    # 自动标注服务url,最后一位需加'/'
    endpoint: http://127.0.0.1/annotation-dev/
    task:
      # 自动标注任务分割的文件split size
      splitSize: 16
      # 单位ms
      retryInterval: 5000
      # 任务不更新置为失败的时间单位秒
      failTime: 43200
  track:
    # 自动追踪服务url
    endpoint: http://127.0.0.1:7091/
  server:
    # 文件存储服务器用户名
    userName: root
  enhance:
    # 数据增强
    endpoint: http://127.0.0.1:8070/
  imageNet:
    # imageNet
    endpoint: http://127.0.0.1:8092/
  ofrecord:
    # 二进制转换
    endpoint: http://127.0.0.1:8093/
  #数据集训练配置
  ptversion: http://127.0.0.1:8000/

# minio配置
minio:
  url: http://127.0.0.1:9000/
  # 部署 minio 时指定的 MINIO_ACCESS_KEY
  accessKey: admin
  # 部署 minio 时指定的 MINIO_SECRET_KEY
  secretKey: 123@abc.com
  bucketName: dubhe-dev
  presignedUrlExpiryTime: 300
  annotation: /annotation/

#logback
logging.config:
  classpath:logback-spring-dev.xml